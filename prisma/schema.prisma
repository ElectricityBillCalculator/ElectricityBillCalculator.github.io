// prisma/schema.prisma

datasource db {
  provider = "postgresql" // หรือ sqlite, mysql, sqlserver, mongodb
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  passwordHash  String?
  name          String?
  emailVerified DateTime?
  image         String?
  readings      Reading[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
}

model Reading {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  meterType       String    // "electricity" หรือ "water"
  previousReading Float
  currentReading  Float
  unitsConsumed   Float     // คำนวณ: currentReading - previousReading
  ratePerUnit     Float
  totalCost       Float     // คำนวณ: unitsConsumed * ratePerUnit
  readingDate     DateTime  // วันที่จดมิเตอร์
  dueDate         DateTime? // วันครบกำหนดชำระ (optional)
  createdAt       DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Models required by NextAuth.js Prisma Adapter
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
